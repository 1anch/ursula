#!/usr/bin/env bash

# if in jenkins, make the venv from the workspace and build ID
# to allow concurrent runs.
if [[ "$CI" == "jenkins" ]]; then
    VENV=$WORKSPACE/venv
    virtualenv $VENV
    source $VENV/bin/activate
    pip install -U -r requirements.txt
fi

source $(dirname $0)/common

${ROOT}/test/check-deps

echo "writing initial inventory file"
mkdir -p ${ROOT}/envs/test
cat > ${ROOT}/envs/test/hosts <<eof
[local]
# Tell ansible to use the python in PATH instead of /usr/bin/python
127.0.0.1 ansible_python_interpreter=python
eof
cp ${ROOT}/envs/example/${TYPE}/defaults.yml ${ROOT}/envs/test/defaults.yml

echo "destroying: ${VMS}"
${ROOT}/test/cleanup

echo "booting ${VMS}"
$(ansible_command \
  "envs/test/hosts" \
  "root" \
  ${ROOT}/playbooks/testenv/tasks/create.yml)

echo "building config"
CONTROLLER_IP=$(private_ip test-controller-0)
rm -rf ${ROOT}/envs/test/group_vars/
rm -f ${ROOT}/envs/test/hosts
mkdir -p ${ROOT}/envs/test/
cp -r ${ROOT}/envs/example/${TYPE}/* ${ROOT}/envs/test
echo "---" > ${ROOT}/envs/test/group_vars/all.yml
echo "controller_primary: ${CONTROLLER_IP}" >> ${ROOT}/envs/test/group_vars/all.yml

echo "generating ssl cert for openstack.example.com"
CERT_DIR=$(mktemp -d 2> /dev/null || mktemp -d -t 'setup')
pushd ${CERT_DIR}
${ROOT}/test/gen-cert openstack.example.com
cat >> ${ROOT}/envs/test/group_vars/all.yml <<eof
ssl:
  crt: |
eof
cat ${CERT_DIR}/openstack.example.com.crt | sed 's/^/    /' >> ${ROOT}/envs/test/group_vars/all.yml
cat >> ${ROOT}/envs/test/group_vars/all.yml <<eof
  key: |
eof
cat ${CERT_DIR}/openstack.example.com.key | sed 's/^/    /' >> ${ROOT}/envs/test/group_vars/all.yml
cat >> ${ROOT}/envs/test/defaults.yml <<eof
logging:
  forward:
    host: kibana.sea03.blueboxgrid.com
    port: 4560
eof
popd
rm -rf ${CERT_DIR}

echo "writing inventory file"
if [ ${TYPE} == "standard" ]; then
  cat > ${ROOT}/envs/test/hosts <<eof
[db]
$(public_ip "test-controller-0")
$(public_ip "test-controller-1")

[db_arbiter]
$(public_ip "test-compute-0")

[controller]
$(public_ip "test-controller-0")
$(public_ip "test-controller-1")

[compute]
$(public_ip "test-compute-0")
$(public_ip "test-controller-0")
$(public_ip "test-controller-1")

[network]
$(public_ip "test-controller-0")
$(public_ip "test-controller-1")

[cinder_volume]
$(public_ip "test-compute-0")
eof
else
  cat > ${ROOT}/envs/test/hosts <<eof
[db]
$(public_ip "test-controller-0")
$(public_ip "test-controller-1")

[db_arbiter]
$(public_ip "test-compute-0")

[controller]
$(public_ip "test-controller-0")

[compute]
$(public_ip "test-controller-0")

[network]
$(public_ip "test-controller-0")
$(public_ip "test-controller-1")
eof
fi

echo "copying files"
$(ansible_command \
  "envs/test/hosts" \
  ${LOGIN_USER} \
  ${ROOT}/playbooks/testenv/tasks/pre-deploy.yml \
  "true")

ring_bell
echo "vms are up: ${VMS} !!"
