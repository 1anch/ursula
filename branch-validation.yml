# playbook for validating a branch for release tagging
# interactive, may prompt runner to affirm things have completed
---
- name: Run rally and validate
  hosts: localhost
  gather_facts: false

  tasks:
    - name: run rally
      pause: prompt="Was rally validation run successful? (yes/no)"
      register: rally

    - name: assert rally successful
      assert:
        that: rally.user_input|bool

- name: test instance connectivity
  hosts: controller[0]
  gather_facts: false

  tasks:
    - name: create keypair
      nova_keypair:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        name: validate
        state: present
      register: keypair

    - name: persist private key
      copy:
        content: "{{ keypair.key }}"
        dest: /root/validate-key
        mode: 0600
      when: keypair.changed

    - name: create security group
      nova_group:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        name: validate_ssh
        description: "validate group allowing ssh ipv4 ingress"
        rules:
          - ip_protocol: tcp
            from_port: 22
            to_port: 22
            cidr: 0.0.0.0/0
            state: present

    - name: discover internal network id
      shell: . /root/stackrc; nova net-list | awk '/ internal / {print $2}'
      register: internal_net

    - name: launch instances in each host az
      nova_compute:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        flavor_id: 1
        image_name: cirros
        key_name: validate
        #auto_floating_ip: yes
        security_groups: default,validate_ssh
        #floating_ip_pools:
        #  - external
        nics:
          - net-id: "{{ internal_net.stdout }}"
        availability_zone: "nova:{{ item }}"
        name: validate-{{ item }}
        wait: "yes"
      with_items: groups['compute']
      register: instances

    - name: associate a floating ip
      nova_fip:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        server: "{{ instances.results[0].id }}"
      register: fip

    - name: wait for instances to be reachable
      wait_for: port=22 delay=5 timeout=300 host={{ fip.floating_ip }}

    - name: cross-node inter-instance connectivity test
      command: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
               -o IdentityFile=/root/validate-key cirros@{{ fip.floating_ip }}
               ping -c 5 {{ item.private_ip }}
      with_items: instances.results

    - name: instance internet connectivity test w/ floating-ip
      command: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
               -o IdentityFile=/root/validate-key cirros@{{ fip.floating_ip }}
               ping -c 5 google.com

    - name: wait for user to login
      pause: prompt="From {{ groups['controller'][0] }} ssh -o
                     UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
                     -o IdentityFile=/root/validate-key
                     cirros@{{ fip.floating_ip }} (press enter when done)"

    - name: disassociate the floating ip
      nova_fip:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        server: "{{ instances.results[0].id }}"
        state: absent

    - name: instance internet connectivity test w/out floating-ip
      pause: prompt="Can you ping -c 5 google.com ? (yes/no)"
      register: ping

    - name: assert ping
      assert:
        that: ping.user_input|bool

    - name: delete instances
      nova_compute:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        flavor_id: 1
        image_name: cirros
        key_name: validate
        #auto_floating_ip: yes
        security_groups: default,validate_ssh
        #floating_ip_pools:
        #  - external
        nics:
          - net-id: "{{ internal_net.stdout }}"
        availability_zone: "nova:{{ item }}"
        name: validate-{{ item }}
        state: absent
        wait: "yes"
      with_items: groups['compute']

    - name: delete security group
      nova_group:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        name: validate_ssh
        description: "validate group allowing ssh ipv4 ingress"
#        rules:
#          - ip_protocol: tcp
#            from_port: 22
#            to_port: 22
#            cidr: 0.0.0.0/0
#            state: present
        state: absent

    - name: delete private key file
      file:
        dest: /root/validate-key
        state: absent

    - name: delete keypair
      nova_keypair:
        login_username: provider_admin
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        auth_url: "http://127.0.0.1:35357/v2.0"
        login_tenant_name: admin
        login_password: "{{ secrets.provider_admin_password }}"
        name: validate
        state: absent
