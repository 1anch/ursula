---
- name: check if corosync.conf exists
  shell: test -e /etc/corosync/corosync.conf && echo "exists" || echo "absent"
  register: corosync_conf_status
  changed_when: False

# Resolve the "main" endpoint fqdn to localhost via /etc/hosts
# in order to allow each control node to be self-sufficient.
# i.e. we don't want a VIP transition failure of pacemaker to cause 
# every OS-related service to fail because the VIP isn't reachable.
- lineinfile: dest=/etc/hosts regexp='^127\.0\.0\.1' line="127.0.0.1 localhost {{ endpoints.main }}"

- name: check if authkey exists 
  shell: test -e /etc/corosync/authkey && echo "exists" || echo "absent"
  register: authkey_exists
  changed_when: False

- name: install corosync and pacemaker packages
  apt: pkg=$item state=present
  with_items:
    - corosync
    - pacemaker
    - resource-agents

# By default, the corosync rc startup/shutdown script on Percise 
# attempts to stop corosync before pacemaker during a 
# reboot or shutdown event which causes the system to hang.
#
# In order to resolve this, the rc ordering must be updated
#
# http://manpages.ubuntu.com/manpages/precise/man8/update-rc.d.8.html
#
# ensure corosync starts before pacemaker and shutsdown after pacemerk
- shell: mv /etc/init.d/corosync /etc/init.d/corosync.bak
- shell: update-rc.d corosync remove
- shell: mv /etc/init.d/corosync.bak /etc/init.d/corosync
- shell: update-rc.d corosync start 19 2 3 4 5 . stop 20 0 1 6 .

# ensure pacemaker starts after corosync and shutsdown before corosync
- shell: mv /etc/init.d/pacemaker /etc/init.d/pacemaker.bak
- shell: update-rc.d pacemaker remove
- shell: mv /etc/init.d/pacemaker.bak /etc/init.d/pacemaker
- shell: update-rc.d pacemaker start 20 2 3 4 5 . stop 19 0 1 6 .

- name: add corosync.conf 
  template: src=corosync.conf dest=/etc/corosync/corosync.conf mode=0400 
  when: corosync_conf_status.stdout.find("exists") == -1

- name: add corosync authkey
  shell: 'echo "{{ corosync.authkey }}" | openssl base64 -d > /etc/corosync/authkey && chown root: /etc/corosync/authkey && chmod 0600 /etc/corosync/authkey'
  when: authkey_exists.stdout.find("exists") == -1

- name: enable corosync at boot
  lineinfile:  dest=/etc/default/corosync regexp=^START= line=START=yes

- name: create openstack ocf resource directory
  action: file path=/usr/lib/ocf/resource.d/openstack state=directory

- name: add openstack haresource agents
  template: src=resource_agents/$item dest=/usr/lib/ocf/resource.d/openstack/$item owner=root group=root mode=0755
  with_items:
  - neutron-agent-l3  

- service: name=corosync state=started enabled=yes
- service: name=pacemaker state=started enabled=yes
