---
- hosts: controller
  tasks:
  - name: horizon is up
    shell: curl http://localhost:8080 | grep "Login - OpenStack Dashboard"
  - name: client stackrc has an os cacert env variable
    shell: grep OS_CACERT=/opt/stack/ssl/openstack.crt /root/stackrc
  - name: common timezone is utc
    shell: grep Etc/UTC /etc/timezone
  - name: common date command has utc
    shell: date | grep UTC
  - name: glance api has proper workers
    shell: grep 'workers = 1' /etc/glance/glance-api.conf
  - name: glance replicated images
    shell: test $(ls /var/lib/glance/images/ | wc -l) -gt 0
  - name: keystone config has memcached servers
    shell: egrep "servers = [0-9.]+:11211,[0-9.]+" /etc/keystone/keystone.conf
  - name: neutron dnsmasq has 8.8.8.8 upstream resolver
    shell: grep 8.8.8.8 /etc/dnsmasq.conf
  - name: neutron dnsmasq has 8.8.4.4 upstream resolver
    shell: grep 8.8.4.4 /etc/dnsmasq.conf
  - name: nova api has proper workers
    shell: grep 'osapi_compute_workers=1' /etc/nova/nova.conf
  - name: nova metadata api has proper workers
    shell: grep 'metadata_workers=1' /etc/nova/nova.conf
  - name: nova config has memcached servers
    shell: egrep memcached_servers=[0-9.]+:11211,[0-9.]+ /etc/nova/nova.conf
  - name: nova config has rabbit servers
    shell: egrep rabbit_hosts=[0-9.]+:5672,[0-9.]+ /etc/nova/nova.conf
  - name: cinder config has rabbit servers
    shell: egrep "rabbit_hosts = [0-9.]+:5672,[0-9.]+" /etc/cinder/cinder.conf
  - name: rabbitmq has a properly configured cluser
    shell: rabbitmqctl -q cluster_status | awk '/disc/,/\},/' | grep -c test-controller | grep 2
  - name: rabbitmq has a default user with administrator tag
    shell: rabbitmqctl list_users | grep openstack | grep '\[administrator\]'
  - name: rabbitmq has the management plugin enabled
    shell: rabbitmq-plugins list | grep '\[E\] rabbitmq_management'
  - name: rabbitmq has the rabbitmqadmin script installed
    shell: test -f /usr/local/bin/rabbitmqadmin
  - name: iptables defaults to dropping connections from the internet
    shell: ufw status verbose | egrep '^Default. deny .incoming.'
  - name: iptables lets ssh in from outside
    shell: ufw status verbose | egrep '^22/tcp                     ALLOW IN    Anywhere'
  - name: all backends are up in haproxy
    shell: curl -k -s -u admin:{{ secrets.admin_password }} https://127.0.0.1/haproxy_stats\;csv | awk '/DOWN/ {print;ec=1} END{exit ec}'

- hosts: controller[0]
  tasks:
  - name: horizon config has memcached servers
    shell: egrep \'[0-9.]+:11211\',\'[0-9]+ /opt/stack/horizon/openstack_dashboard/local/local_settings.py
  - name: keystone should include OpenStack services
    shell: . /root/stackrc; keystone service-list | grep {{ item }}
    with_items:
    - keystone
    - nova
    - neutron
    - glance
    - cinder
  - name: cinder has a working api
    shell: . /root/stackrc; cinder list | grep ID
  - name: glance has the cirros image
    shell: . /root/stackrc; glance index | grep cirros
  - name: nova has a working api
    shell: . /root/stackrc; nova list | grep ID
  - name: m1.tiny flavor has been embiggened
    shell: mysql -e "select root_gb from nova.instance_types where name='m1.tiny';" | grep 10

  - name: migrate neutron services to test-controller-0
    shell: . /root/stackrc; /usr/local/bin/migrate_neutron_services test-controller-1 test-controller-0
  - name: generate ssh key for root
    user: name=root generate_ssh_key=yes
  - name: generate nova key-pair
    shell: . /root/stackrc; nova keypair-add turtle-key --pub-key /root/.ssh/id_rsa.pub
  - name: generate test security group
    shell: . /root/stackrc; neutron security-group-create turtle-sec && neutron security-group-rule-create turtle-sec --remote-ip-prefix 0.0.0.0/0
  - name: nova can boot an instance
    shell: . /root/stackrc; INTERNAL_NET=$( nova net-list | awk '/ internal / {print $2}' ); nova boot --flavor m1.tiny --image cirros --nic net-id=${INTERNAL_NET} --key-name turtle-key --security-groups turtle-sec --poll turtle-stack
  - name: nova can associate floating IP with test instance
    shell: . /root/stackrc; FLOATING_IP=$( nova floating-ip-create external | awk '/ external / {print $2}' ); nova add-floating-ip turtle-stack ${FLOATING_IP}
  - name: test instance can ping Google
    shell: . /root/stackrc; TURTLE_IP=$( nova list | awk '/turtle-stack/ {print $13}' ); sleep 30; ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no cirros@${TURTLE_IP} ping -c 5 www.google.com
  - name: cleanup test instance, key-pair and security group
    shell: . /root/stackrc; nova delete turtle-stack && sleep 30 && nova secgroup-delete turtle-sec && nova keypair-delete turtle-key
