---
- name: check if keystone user exists
  action: shell getent passwd keystone
  register: keystone_user
  failed_when: False
  changed_when: False

- name: keystone user
  user: name=keystone shell=/bin/false createhome=no
  when: keystone_user|success

- name: keystone user
  user: name=keystone comment=keystone shell=/bin/false system=yes
        home=/nonexistent createhome=no
  when: not keystone_user|success

- name: keystone config dir
  file: dest=/etc/keystone state=directory

- name: keystone log dir
  file: dest=/var/log/keystone state=directory mode=2750 owner=keystone
        group=adm

- name: Change keystone log dir acl
  acl: name=/var/log/keystone state=present default=yes etype={{ item.etype }} permissions={{ item.permission }}
  with_items:
    - etype: user
      permission: rw
    - etype: group
      permission: r
    - etype: other
      permission: r

- name: set uwsgi path (source install)
  set_fact: uwsgi_path={{ openstack_source.virtualenv_base }}/keystone/bin/uwsgi
  when: openstack_install_method == 'source'
  
- name: set uwsgi path (package install)
  set_fact:
    uwsgi_path: "{{ lookup('items', 'openstack_package.virtualenv_base') }}/keystone/bin/uwsgi"
  when: openstack_install_method == 'package'
  
- name: install keystone uwsgi service
  template: src=etc/init/keystone.conf
            dest=/etc/init/keystone.conf mode=0644
  
- name: Creates keystone uwsgi and httpd directories
  file: path={{ item }} state=directory
        owner=keystone group=keystone mode=0775
  with_items:
    - /var/www/keystone 
    - /etc/keystone/uwsgi

- name: install keystone uwsgi service
  template: src=var/www/keystone/keystone.py
            dest=/var/www/keystone/{{ item }} mode=0775
            owner=keystone group=keystone
  with_items:
    - admin
    - main
                    
- name: configure keystone admin wsgi
  template: src=etc/keystone/uwsgi/keystone-admin.ini
            dest=/etc/keystone/uwsgi/keystone-admin.ini mode=0775
            owner=keystone group=keystone

- name: configure keystone public wsgi
  template: src=etc/keystone/uwsgi/keystone-main.ini
            dest=/etc/keystone/uwsgi/keystone-main.ini mode=0775
            owner=keystone group=keystone

- name: configure keystone
  template: src={{ item }} dest=/etc/keystone/
            mode={{ 0644 if 'policy.json' in item else 0640 }}
            owner=keystone group=keystone
  with_fileglob: ../templates/etc/keystone/*
  notify:
    - restart keystone services

- name: stop keystone service before db sync
  service: name=keystone state=stopped
  when: database_create.changed or force_sync|default('false')|bool
  tags: db-migrate

- name: sync keystone database
  command: keystone-manage db_sync
  when: database_create.changed or force_sync|default('false')|bool
  run_once: true
  changed_when: true
  notify: restart keystone services
  # we want this to always be changed so that it can notify the service restart
  tags: db-migrate

- meta: flush_handlers

- name: start keystone
  service: name=keystone state=started

- name: permit access to keystone
  ufw: rule=allow to_port={{ item }} proto=tcp
  tags: ufw
  with_items:
    - "{{ endpoints.keystone.port.haproxy_api }}"
    - "{{ endpoints.keystone_admin.port.haproxy_api }}"
    - "{{ endpoints.keystone_legacy.port.haproxy_api }}"

- name: add cron job to clean up expired tokens
  template:
    src: etc/cron.d/drop-expired-keystone-tokens
    dest: /etc/cron.d/drop-expired-keystone-tokens
    owner: root
    group: root
    mode: 0640
  run_once: true

- name: delete old token flush job
  file:
    path: /etc/cron.hourly/drop-expired-keystone-tokens
    state: absent

- include: monitoring.yml tags=monitoring,common
  when: monitoring.enabled|default('True')|bool


- include: logging.yml
  tags:
    - logrotate
    - logging
  when: logging.enabled|default('True')|bool

- include: serverspec.yml
  tags:
    - serverspec

