[DEFAULT]
logging_context_format_string=%(asctime)s {{ ansible_hostname }} %(name)s[%(process)d]: %(levelname)s [%(request_id)s %(user)s %(tenant)s] %(instance)s%(message)s
logging_default_format_string=%(asctime)s {{ ansible_hostname }} %(name)s[%(process)d]: %(levelname)s [-] %(instance)s%(message)s

[loggers]
keys = root, cinder, keystoneclient

[handlers]
keys = syslog, stderr, stdout

[formatters]
keys = context, default

[logger_root]
level = WARNING
handlers = syslog

[logger_cinder]
level = INFO
handlers = syslog
qualname = cinder

[logger_keystoneclient]
level = INFO
handlers = syslog
qualname = keystoneclient

[logger_amqplib]
level = WARNING
handlers = syslog
qualname = amqplib

[logger_sqlalchemy]
level = WARNING
handlers = syslog
qualname = sqlalchemy
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARNING" logs neither.  (Recommended for production systems.)

[logger_boto]
level = WARNING
handlers = syslog
qualname = boto

[logger_suds]
level = INFO
handlers = syslog
qualname = suds

[logger_eventletwsgi]
level = WARNING
handlers = syslog
qualname = eventlet.wsgi.server

[handler_syslog]
level = WARNING
class = handlers.SysLogHandler
formatter = context
args = (('127.0.0.1', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_LOCAL0)

[handler_stderr]
class = StreamHandler
args = (sys.stderr,)
formatter = default

[handler_stdout]
class = StreamHandler
args = (sys.stdout,)
formatter = default

[formatter_default]
format = %(message)s

[formatter_context]
class = cinder.openstack.common.log.ContextFormatter
datefmt = %b %d %H:%M:%S
