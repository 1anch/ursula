#!/usr/bin/env python2.7

import logging
import os
import sys
import time
import neutronclient

dest_node = os.environ['HOSTNAME']

print "Moving neutron services to %s...\n" % (dest_node)

neutron_auth = {
    'username':    os.environ['OS_USERNAME'],
    'password':    os.environ['OS_PASSWORD'],
    'tenant_name': os.environ['OS_TENANT_NAME'],
    'auth_url':    os.environ['OS_AUTH_URL'],
    'region_name': 'RegionOne',
}

if 'OS_CACERT' in os.environ.keys():
    neutron_auth['ca_cert'] = os.environ['OS_CACERT']

#logging.basicConfig(level=logging.DEBUG)
neutron = neutronclient.neutron.Client('2.0', **neutron_auth)
neutron.format = 'json'


#
# Build as two level dictionary by host then type of Neutron agents
#
agents = neutron.list_agents()

host_agents = {}

for agent in agents['agents']:
    if agent['host'] not in host_agents.keys():
        host_agents[agent['host']] = {}

    host_agents[agent['host']][agent['agent_type']] = agent['id']


#
# Move routers between L3 agents
#
if dest_node in host_agents.keys() and 'L3 agent' in host_agents[dest_node].keys():
    dest_l3_agent = host_agents[dest_node]['L3 agent']
    routers = neutron.list_routers()

    for router in routers['routers']:
        hosting_agents = neutron.list_l3_agent_hosting_routers(router['id'])

        for hosting_agent in hosting_agents['agents']:
            if hosting_agent['host'] == dest_node:
                continue

            neutron.remove_router_from_l3_agent(hosting_agent['id'], router['id'])
            for attempt in range(3):
                try:
                    neutron.add_router_to_l3_agent(dest_l3_agent, {'router_id': router['id']})
                    print "Moved %s (%s) router" % (router['name'], router['id'])
                except neutronclient.common.exceptions.NeutronClientException:
                    time.sleep(1)
                    continue
                break

else:
    print "No L3 agent exists on %s" % (dest_node)

#
# Move DHCP servers between L3 agents
#
if dest_node in host_agents.keys() and 'DHCP agent' in host_agents[dest_node].keys():
    dest_dhcp_agent = host_agents[dest_node]['DHCP agent']

    for src_agent in [ host_agents[host]['DHCP agent'] for host in host_agents.keys() if 'DHCP agent' in host_agents[host].keys() and host != dest_node ]:
        networks = neutron.list_networks_on_dhcp_agent(src_agent)

        for network in networks['networks']:
            neutron.remove_network_from_dhcp_agent(src_agent, network['id'])
            for attempt in range(3):
                try:
                    neutron.add_network_to_dhcp_agent(dest_dhcp_agent, {'network_id': network['id']})
                    print "Moved DHCP for %s (%s) network" % (network['name'], network['id'])
                except neutronclient.common.exceptions.NeutronClientException:
                    time.sleep(1)
                    continue
                break

else:
    print "No DHCP agent exists on %s" % (dest_node)
